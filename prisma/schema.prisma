generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optimized for NeonDB
  relationMode = "prisma"
}

model User {
  id             String            @id @default(cuid())
  clerkId        String            @unique
  username       String            @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  messages       Message[]
  ownedRooms     Room[]            @relation("RoomOwner")
  participations RoomParticipant[]
}

model Room {
  id           String            @id @default(cuid())
  name         String
  description  String?
  isPublic     Boolean           @default(true)
  maxUsers     Int               @default(10)
  password     String?
  topics       String[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  ownerId      String
  messages     Message[]
  owner        User              @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
}

model RoomParticipant {
  id       String   @id @default(cuid())
  userId   String
  roomId   String
  isMuted  Boolean  @default(false)
  isDeafen Boolean  @default(false)
  hasVideo Boolean  @default(true)
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  roomId    String
  senderId  String
  timestamp DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([senderId])
}
